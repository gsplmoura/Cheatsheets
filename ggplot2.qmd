---
title: "Data visualization with ggplot2"
subtitle: "The ultimate cheatsheet compilation"
author: 
  - name: "**Gustavo Santos Paiva Laender Moura**"
    affiliation: "University of São Paulo, Ribeirão Preto Medical School, Department of Internal Medicine"
    email: "gsplmoura@usp.br"
date: today
execute:
  eval: true
  echo: true
  output: true
  warning: true
  message: true
format: 
  html:
      theme: flatly
      toc: true
      toc-depth: 5  # Increase this to include more levels
      toc-location: left
      number-sections: false
---

![](https://rstudio.github.io/cheatsheets/html/images/logo-ggplot2.png)

```{r, message=FALSE}
library(tidyverse)
library(skimr)
```

# Overview

-   Run `?ggplot2` for author information. ggplot2 is a system for 'declaratively' creating graphics, based on "The Grammar of Graphics". You provide the data, tell 'ggplot2' how to map variables to aesthetics, what graphical primitives to use, and it takes care of the details.

-   For package documentation, run `help(package = "ggplot2")`

-   Need help getting started? Try the [R Graphics Cookbook](https://r-graphics.org)

-   [Tidyverse::ggplot2](https://ggplot2.tidyverse.org)

-   [Github](https://github.com/tidyverse/ggplot2)

-   [Cheat sheet](https://rstudio.github.io/cheatsheets/html/data-visualization.html)

-   [Cheat sheet pdf](https://rstudio.github.io/cheatsheets/data-visualization.pdf)

-   Run `??ggplot2` for broader search

-   For an html helper page on your browser, run

```{r, eval=FALSE}
help.start()
browseVignettes("ggplot2")
```

# Datasets

### mpg

Fuel economy data from 1999 to 2008 for 38 popular models of cars. A data frame with 234 rows and 11 variables:

| `mpg` vars.  | **Description**                            |
|--------------|--------------------------------------------|
| manufacturer | Manufacturer name                          |
| model        | Model name                                 |
| displ        | Engine displacement (liters)               |
| year         | Year of manufacture                        |
| cyl          | Number of cylinders                        |
| trans        | Type of transmission                       |
| drv          | Drive train (f = front, r = rear, 4 = 4WD) |
| cty          | City miles per gallon                      |
| hwy          | Highway miles per gallon                   |
| fl           | Fuel type                                  |
| class        | Type of car                                |

```{r}
glimpse(mpg)
```

```{r}
skimr::skim(mpg)
```

### economics & economics_long

US economic time series: `economics` is in wide format and & `economics_long` in long format. A data frame with 574 rows and 6 variables.

| vars.    | **Description**                                       |
|----------|-------------------------------------------------------|
| date     | Month of data collection                              |
| pce      | Personal consumption expenditures (in billions of \$) |
| pop      | Total population (in thousands)                       |
| psavert  | Personal savings rate                                 |
| uempmed  | Median duration of unemployment (in weeks)            |
| unemploy | Number of unemployed (in thousands)                   |

```{r}
glimpse(economics)
```

```{r}
skimr::skim(economics)
```

### seals

Vector field data of seal movements. A data frame with 1155 rows and 4 variables. This dataset is likely used for visualizing seal movement patterns over time, possibly using vector field plots. The delta_long and delta_lat columns indicate how far a seal has moved from one observation to the next.

| vars. | **Description** |
|----------------------|--------------------------------------------------|
| lat | (latitude): The geographical latitude where the seal was recorded |
| long | (longitude): The geographical longitude where the seal was recorded |
| delta_long | Change in longitude between consecutive observations, representing movement |
| delta_lat | Change in latitude between consecutive observations, representing movement |

```{r, eval=FALSE}
glimpse(seals)
```

```{r, eval=FALSE}
skimr::skim(seals)
```

### mtcars

Motor Trend Car Road Tests

Fuel consumption and 10 aspects of automobile design and performance for 32 automobiles (1973–74 models). A data frame with 32 observations on 11 (numeric) variables.

| col     | vars. | **Description**                          |
|---------|-------|------------------------------------------|
| \[, 1\] | mpg   | Miles/(US) gallon                        |
| \[, 2\] | cyl   | Number of cylinders                      |
| \[, 3\] | disp  | Displacement (cu.in.)                    |
| \[, 4\] | hp    | Gross horsepower                         |
| \[, 5\] | drat  | Drive ratio (or rear axle ratio) \*      |
| \[, 6\] | wt    | Weight (1000 lbs)                        |
| \[, 7\] | qsec  | time in sec to complete a quarter mile   |
| \[, 8\] | vs    | Engine (0 = V-shaped, 1 = straight)      |
| \[, 9\] | am    | Transmission (0 = automatic, 1 = manual) |
| \[,10\] | gear  | Number of forward gears                  |
| \[,11\] | carb  | Number of carburetors                    |

\* Drive ratio refers to the ratio of the number of rotations of the driveshaft to one full rotation of the rear wheels. A higher `drat` means the engine needs **more** rotations to turn the wheels once, which can provide **better acceleration** but may reduce fuel efficiency.

```{r}
glimpse(mtcars)
```

```{r}
skimr::skim(mtcars)
```

# Basics

**ggplot2** is based on the **grammar of graphics**, the idea that you can build every graph from the same components: (1) a **data** set, a (2) **coordinate system**, and (3) **geoms** --- visual marks that represent data points.

```{r}
last_plot() # Returns the last plot.

ggsave("plot.png", width = 5, height = 5) # Saves last plot as 5' x 5' file named "plot.png" in working directory. Matches file type to file extension.

```

To display values, **map** *variables in the data* to *visual properties of the geom* (**aesthetics**) like **size**, **color**, and **x** and **y** locations.

Complete the template below to build a graph.

ggplot(data = ) + #required: data \<geom\_...\>(mapping = aes(<Mappings>), #required: geom function & aes mapping stat = <Stat>, position = <Position> + <Coordinate_Function> + <Facet_Function> + <Scale_Function> + <Theme_Function>

**Data, a Geom Function, and Aes Mappings are required.** Stat, Position, and the Coordinate, Facet, Scale, and Theme functions are not required and will supply sensible defaults.

```{r}
ggplot(data = mpg, aes(x = cty, y = hwy)) # no geom_function
  # Begins a plot that you finish by adding layers to.
  # Add one geom function per layer.
```

## Common aes() values

### color and fill

String (`"red"`, `"#RRGGBB"`).

### linetype

```{r}
library(ggplot2)

# Create a data frame with different line types, inverted order
linetypes_df <- data.frame(
  x = rep(1, 7),
  y = 6:0,  # Ensures values from 6 to 0
  linetype = factor(6:0, labels = c("twodash", "longdash", "dotdash", 
                                    "dotted", "dashed", "solid", "blank"))
)

# Create the plot
ggplot(linetypes_df, aes(x = x, y = y, linetype = linetype)) +
  geom_segment(aes(x = 2, xend = 3, y = y, yend = y), size = 1.5) +  # Draws the lines
  scale_linetype_manual(values = 0:6) +  # Assigns line types
  scale_y_continuous(breaks = 6:0, labels = c("twodash (6)", "longdash (5)", "dotdash (4)", 
                                                  "dotted (3)", "dashed (2)", "solid (1)", "blank (0)")) +  # Ensures all 7 tick labels
  labs(title = "ggplot2 linetypes", 
       x = NULL, y = NULL) +
  theme_minimal() +
  theme(
    axis.line.x = element_blank(),  # Removes x-axis line
    axis.ticks.x = element_blank(), # Removes x-axis ticks
    axis.text.x = element_blank(),  # Removes x-axis labels
    legend.position = "none"
  ) 

```

### size

Integer (in mm for size of points and text).

### linewidth

Integer (in mm for widths of lines).

### shape

Integer/shape name or a single character (`"a"`).

```{r}
library(ggplot2)

# Create a data frame with different shape types
shapes_df <- data.frame(
  x = rep(1, 26),
  y = 0:25,  # Reverse order to display top to bottom
  shape = factor(0:25, labels = c(
    "square open (0)", "circle open (1)", "triangle open (2)", "plus (3)",
    "cross (4)", "diamond open (5)", "triangle down open (6)", "square cross (7)",
    "asterisk (8)", "diamond plus (9)", "circle plus (10)", "star (11)",
    "square plus (12)", "circle cross (13)", "square triangle (14)", "square (15)",
    "circle (16)", "triangle (17)", "diamond (18)", "circle small (19)",
    "bullet (20)", "circle filled (21)", "square filled (22)", "diamond filled (23)",
    "triangle filled (24)", "triangle down filled (25)"
  ))) # Ensure exactly 25 labels


# Create the plot
ggplot(data = shapes_df) +
  geom_point(mapping = 
             aes(
               x = x, 
               y = y,
               shape = shape),size = 2.2) +
  scale_shape_manual(values = 0:25) +  # Assigns shape values
  scale_y_continuous(breaks = 25:0, labels = rev(levels(shapes_df$shape))) +  # Ensures all tick labels
  labs(title = "ggplot2 shapes", x = NULL, y = NULL) +
  theme_minimal(base_line_size = 0.2) +
    theme(
    axis.line.x = element_blank(),  # Removes x-axis line
    axis.ticks.x = element_blank(), # Removes x-axis ticks
    axis.text.x = element_blank())  # Removes x-axis labels

```

# Geom primitives

1.  Use a geom function to represent data points;
2.  Use the geom's aesthetic properties to represent variables;
3.  Each function returns a layer.

### geom_blank()

The *base code `n_unemploy`* where examples will be built is based on the `economics` dataset.

Note that running `n_unemploy` displays the base coordinate system with the variables `date` in the x axis and `unemploy` in the y axis. However, no actual data is plotted, since no `geom_` function was specified.

```{r}
n_unemploy <- ggplot(data = economics, aes(x = date, y = unemploy))
    # x = date        <date> 1967-07-01,...   Month of data collection
    # y = unemploy    <dbl> 2944,...          Number of unemployed (in thousands)

n_unemploy # Note that running 
```

The blank geom draws nothing, but can be a useful way of ensuring common scales between different plots. See expand_limits() for more details.

Returns the same result as the *base code `n_unemploy`*

```{r}
n_unemploy + geom_blank()

# OR 

ggplot(data = economics) +
  geom_blank(aes(x = date, y = unemploy))

```

### Connecting observations

geom_path() connects the observations in the order in which they appear in the data. geom_line() connects them in order of the variable on the x axis. geom_step() creates a stairstep plot, highlighting exactly when changes occur. 

geom_polygon(): Polygons are very similar to paths (as drawn by geom_path()) except that the start and end points are connected and the inside is coloured by fill. 

So use geom_path() for an unfilled polygon, geom_polygon() for a filled polygon and geom_ribbon() for a polygon anchored on the x-axis.


#### geom_path()

Before we look at `geom_path`, let's just take a look at a standard scatter plot to get a sense of the data.

```{r}
n_unemploy + geom_point()

# OR 

ggplot(data = economics) +
  geom_point(aes(x = date, y = unemploy))
```

`geom_path()` connects the observations in the *order in which they appear* in the data. The `group` aesthetic determines which cases are connected together.

`aes()` arguments: `x`, `y`, `alpha`, `color`, `group`, `linetype`, `size`.

Usage:

```         
geom_path(
  mapping = NULL,
  data = NULL,
  stat = "identity",
  position = "identity",
  ...,
  lineend = "butt",
  linejoin = "round",
  linemitre = 10,
  arrow = NULL,
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE
)
```

Arguments:

-   `lineend`: Line end style ("round", "butt", "square").

-   `linejoin`: Line join style ("round", "mitre", "bevel").

-   `linemitre`: Line mitre limit (number greater than 1). Obs. miter/mitre: (joint) chanfro de 45 graus

```{r}
n_unemploy + geom_path(lineend = "butt", linejoin = "mitre", linemitre = 1)

# OR 

ggplot(data = economics) +
  geom_path(aes(x = date, y = unemploy)) # in this case no arguments are specified.

```

Other functions used to **connect observations** are:

-   `geom_line()` connects them in order of the variable on the x axis

-   `geom_step()` creates a stairstep plot, highlighting exactly when changes occur.

#### geom_polygon()

Polygons are very similar to paths (as drawn by `geom_path()`) except that the *start and end points are connected* and *the inside is coloured by fill*. The *group aesthetic* determines which cases are connected together into a polygon.

It is possible to draw polygons with holes by providing a subgroup aesthetic that differentiates the outer ring points from those describing holes in the polygon.

`aes()` arguments: `x`, `y`, `alpha`, `color`, `fill`, `group`, `subgroup`, `linetype`, `size`.

- relevant: `fill`, `subgroup`

```         
geom_polygon(
  mapping = NULL,
  data = NULL,
  stat = "identity",
  position = "identity",
  rule = "evenodd",
  ...,
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE
)
```

```{r}
n_unemploy + geom_polygon()

# OR 

ggplot(data = economics) +
  geom_polygon(aes(x = date, y = unemploy))

```

#### geom_ribbon() & geom_area()

For each x value, `geom_ribbon()` displays a y interval defined by `ymin` and `ymax`. 

`aes()` arguments: `x`, `ymin`, `ymax`, `alpha`, `color`, `fill`, `group`, `linetype`, `size`.

- relevant: `ymin`, `ymax`, `outline.type`

`geom_area()` is a special case of geom_ribbon(), where the *`ymin` is fixed to 0 and y is used instead of ymax*.

```{r}

n_unemploy + geom_ribbon(aes(ymin = unemploy - 900, ymax = unemploy + 900))

# OR 

ggplot(data = economics) +
  geom_ribbon(aes(x = date, y = unemploy, 
                  ymin = unemploy - 900, ymax = unemploy + 900))
                         
```

### expand_limits()

Expands the plot limits using data. Sometimes you may want to ensure limits include a single value, for all panels or all plots. This function is a thin wrapper around `geom_blank()` that makes it easy to add such values.

```{r}
mpg_wt <- ggplot(data = mtcars, # 11 numerical variables for 32 automobiles
                 aes(x = mpg, y = wt)) + geom_point()

mpg_wt

```

```{r}
mpg_wt + expand_limits(x = 0) 

# OR

ggplot(data = mtcars) +
  geom_point(aes(x = mpg, y = wt)) +
  expand_limits(x = 0)
```

```{r}
mpg_wt + expand_limits(y = c(1, 9)) 

# OR

ggplot(data = mtcars) +
  geom_point(aes(x = mpg, y = wt)) +
  expand_limits(y = c(1, 9))
```

```{r}
mpg_wt + expand_limits(x = 0, y = 0) 

# OR

ggplot(data = mtcars) +
  geom_point(aes(x = mpg, y = wt)) +
  expand_limits(x = 0, y = 0)

```

```{r}
mpg_wt + expand_limits(x = c(0,40), y = c(0,10))

# OR

ggplot(data = mtcars) +
  geom_point(aes(x = mpg, y = wt)) +
  expand_limits(x = c(0,40), y = c(0,10))

```


**SEAL DATASET**
```{r}
seal_lat <- ggplot(data = seals, aes(x = long, y = lat))
    # x = long        <dbl>                   Geographical longitude where the seal was recorded
    # y = lat         <dbl>                   Geographical latitude where the seal was recorded 

seal_lat + geom_point()
```

### Line segments and curves

#### geom_segment() & geom_curve()

`geom_segment()` draws a straight line from `(x, y)` to `(xend, yend)`. 

`geom_curve()` draws a curved line from `(x, y)` to `(xend, yend)`. See the underlying drawing function `grid::curveGrob()` for the parameters that control the curve. `aes()` arguments: `x`, `xend`, `y`, `yend`, `alpha`, `angle`, `color`, `curvature`, `linetype`, `size`.

```{r}
seal_lat + geom_segment(aes(yend = lat + 1, xend = long + 1)) # Draw a straight line from `(x, y)` to `(xend, yend)`.

seal_lat + geom_curve(aes(yend = lat + 1, xend = long + 1), curvature = 1)


ggplot() +
  geom_curve(aes(x = 2.62, xend = 3.57, y = 21.0, yend = 15.0, colour = "curve")) +
  geom_segment(aes(x = 2.62, xend = 3.57, y = 21.0, yend = 15.0, colour = "segment"))


wt_mpg <- ggplot(mtcars, aes(wt, mpg)) +
  geom_point()

os_curve <- data.frame(x1 = 2.62, x2 = 3.57, y1 = 21.0, y2 = 15.0)

wt_mpg +
  geom_curve(aes(x = x1, y = y1, xend = x2, yend = y2, colour = "curve"), data = os_curve, arrow = arrow(length = unit(0.05, "npc"))) +
  geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2, colour = "segment"), data = os_curve)

```
#### geom_spoke()

geom_spoke() is a polar parameterisation of geom_segment(). It is useful when you have variables that describe direction and distance. The angles start from east and increase counterclockwise.

Draw line segments using polar coordinates (`angle` and `radius`).

```{r}
seal_lat + geom_spoke(aes(angle = 1:1155, radius = 1)) # Draw line segments using polar coordinates (`angle` and `radius`).
```

#### geom_rect()

-   ``: Draw a rectangle by connecting four corners (`xmin`, `xmax`, `ymin`, `ymax`). `aes()` arguments: `xmax`, `xmin`, `ymax`, `ymin`, `alpha`, `color`, `fill`, `linetype`, `size`.

```{r}
seal_lat + geom_rect(aes(xmin = long, ymin = lat, xmax = long + 1, ymax = lat + 1))
```


### Reference lines: horizontal, vertical, and diagonal

These geoms add reference lines (sometimes called rules) to a plot, either horizontal, vertical, or diagonal (specified by slope and intercept). These are useful for annotating plots.

Common aesthetics: `x`, `y`, `alpha`, `color`, `linetype`, `size`, `linewidth`.

#### geom_abline()
Draw a diagonal reference line with a given `slope` and `intercept`.

```{r}
ggplot() + geom_abline(aes(intercept = 0, slope = 1)) # Draw a diagonal reference line with a given `slope` and `intercept`.
```

#### geom_hline()
Draw a horizontal reference line with a given `yintercept`.

```{r}
seal_lat + geom_hline(aes(yintercept = lat)) # Draw a horizontal reference line with a given `yintercept`.
```

#### geom_vline()
Draw a vertical reference line with a given `xintercept`.

```{r}
seal_lat + geom_vline(aes(xintercept = long)) # Draw a vertical reference line with a given `xintercept`.
```

# One Variable

## Continuous

```{r}
hwy <- ggplot(
  data = mpg, # Fuel economy data from 1999 to 2008 for 38 popular models of cars.
  aes(hwy)) # Highway miles per gallon

hwy
```

### geom_area()

Draw an area plot. `aes()` arguments: `x`, `y`, `alpha`, `color`, `fill`, `linetype`, `linewidth`.

```{r}
hwy + geom_area(stat = "bin")
```

### geom_density()

Compute and draw kernel density estimates. `aes()` arguments: `x`, `y`, `alpha`, `color`, `fill`, `group`, `linetype`, `linewidth`, `weight`.

```{r}
hwy + geom_density(kernel = "gaussian")
```


```{r}
hwy + geom_dotplot()
```
Draw a dot plot. `aes()` arguments: `x`, `y`, `alpha`, `color`, `fill`.


```{r}
hwy + geom_freqpoly()
```
Draw a frequency polygon. `aes()` arguments: `x`, `y`, `alpha`, `color`, `group`, `linetype`, `linewidth`.


```{r}
hwy + geom_histogram(binwidth = 5)
```
Draw a histogram. `aes()` arguments: `x`, `y`, `alpha`, `color`, `fill`, `linetype`, `linewidth`, `weight`.


```{r}
ggplot(mpg) + geom_qq(aes(sample = hwy))
```
Draw a quantile-quantile plot. `aes()` arguments: `x`, `y`, `alpha`, `color`, `fill`, `linetype`, `size`, `weight`.

## Discrete

```{r}
d <- ggplot(mpg, aes(fl))
```

-   `d + geom_bar()`: Draw a bar chart. `aes()` arguments: `x`, `alpha`, `color`, `fill`, `linetype`, `linewidth`, `weight`.

# Two Variables

## Both Continuous

```{r}
e <- ggplot(mpg, aes(cty, hwy))
```

-   `e + geom_label(aes(label = cty), nudge_x = 1, nudge_y = 1)`: Add text with a rectangle background. `aes()` arguments: - `x`, `y`, `label`, `alpha`, `angle`, `color`, `family`, `fontface`, `hjust`, `lineheight`, `size`, `vjust`.

-   `e + geom_point()`: Draw a scatter plot. `aes()` arguments: `x`, `y`, `alpha`, `color`, `fill`, `shape`, `size`, `stroke`.

-   `e + geom_quantile()`: Fit and draw quantile regression for the plot data. `aes()` arguments: `x`, `y`, `alpha`, `color`, `group`, `linetype`, `linewidth`, `weight`.

-   `e + geom_rug(sides = "bl")`: Draw a rug plot. `aes()` arguments: `x`, `y`, `alpha`, `color`, `linetype`, `linewidth`.

-   `e + geom_smooth(method = lm)`: Plot smoothed conditional means. `aes()` arguments: `x`, `y`, `alpha`, `color`, `fill`, `group`, `linetype`, `linewidth`, `weight`.

-   `e + geom_text(aes(label = cty), nudge_x = 1, nudge_y = 1)`: Add text to a plot. `aes()` arguments: `x`, `y`, `label`, `alpha`, `angle`, `color`, `family`, `fontface`, `hjust`, `lineheight`, `size`, `vjust`.

### Two Variables - One Discrete, One Continuous

```{r}
f <- ggplot(mpg, aes(class, hwy))
```

-   `f + geom_col()`: Draw a bar plot. `aes()` arguments: `x`, `y`, `alpha`, `color`, `fill`, `group`, `linetype`, `linewidth`.

-   `f + geom_boxplot()`: Draw a box plot. `aes()` arguments: `x`, `y`, `lower`, `middle`, `upper`, `ymax`, `ymin`, `alpha`, `color`, `fill`, `group`, `linetype`, `shape`, `linewidth`, `weight`.

-   `f + geom_dotplot(binaxis ="y", stackdir = "center")`: Draw a dot plot. `aes()` arguments: `x`, `y`, `alpha`, `color`, `fill`, `group`.

-   `f + geom_violin(scale = "area")`: Draw a violin plot. `aes()` arguments: `x`, `y`, `alpha`, `color`, `fill`, `group`, `linetype`, `linewidth`, `weight`.

### Two Variables - Both Discrete

```{r}
g <- ggplot(diamonds, aes(cut, color))
```

-   `g + geom_count()`: Plot a count of points in an area to address over plotting. `aes()` arguments: `x`, `y`, `alpha`, `color`, `fill`, `shape`, `size`, `stroke`.

-   `e + geom_jitter(height = 2, width = 2)`: Jitter points in a plot. `aes()` arguments: `x`, `y`, `alpha`, `color`, `fill`, `shape`, `size`.

### Two Variables - Continuous Bivariate Distribution

```{r}
h <- ggplot(diamonds, aes(carat, price))
```

-   `h + geom_bin2d(binwidth = c(0.25, 500))`: Draw a heatmap of 2D rectangular bin counts. `aes()` arguments: `x`, `y`, `alpha`, `color`, `fill`, `linetype`, `size`, `weight`.

-   `h + geom_density_2d()`: Plot contours from 2D kernel density estimation. `aes()` arguments: `x`, `y`, `alpha`, `color`, `group`, `linetype`, `linewidth`.

-   `h + geom_hex()`: Draw a heatmap of 2D hexagonal bin counts. `aes()` arguments: `x`, `y`, `alpha`, `color`, `fill`, `linewidth`.

### Two Variables - Continuous Function

```{r}
i <- ggplot(economics, aes(date, unemploy))
```

-   `i + geom_area()`: Draw an area plot. `aes()` arguments: `x`, `y`, `alpha`, `color`, `fill`, `linetype`, `linewidth`.

-   `i + geom_line()`: Connect data points, ordered by the x axis variable. `aes()` arguments: `x`, `y`, `alpha`, `color`, `group`, `linetype`, `linewidth`.

-   `i + geom_step(direction = "hv"`: Draw a stairstep plot. `aes()` arguments: `x`, `y`, `alpha`, `color`, `group`, `linetype`, `linewidth`.

### Two Variables - Visualizing Error

```{r}
df <- data.frame(grp = c("A", "B"), fit = 4:5, se = 1:2)
j <- ggplot(df, aes(grp, fit, ymin = fit - se, ymax = fit + se))
```

-   `j + geom_crossbar(fatten = 2)`: Draw a crossbar. `aes()` arguments: `x`, `y`, `ymax`, `ymin`, `alpha`, `color`, `fill`, `group`, `linetype`, `linewidth`.

-   `j + geom_errorbar()`: Draw an errorbar. Also `geom_errorbarh()`. `aes()` arguments: `x`, `ymax`, `ymin`, `alpha`, `color`, `group`, `linetype`, `linewidth`, `width`.

-   `j + geom_linerange()`: Draw a line range. `aes()` arguments: `x`, `ymin`, `ymax`, `alpha`, `color`, `group`, `linetype`, `linewidth`.

-   `j + geom_pointrange()`: Draw a point range. `aes()` arguments: `x`, `y`, `ymin`, `ymax`, `alpha`, `color`, `fill`, `group`, `linetype`, `shape`, `linewidth`.

### Two Variables - Maps

Draw the appropriate geometric object depending on the simple features present in the data. `aes()` arguments: `map_id`, `alpha`, `color`, `fill`, `linetype`, `linewidth`.

```{r}
nc <- sf::st_read(system.file("shape/nc.shp", package = "sf"))
ggplot(nc) +
  geom_sf(aes(fill = AREA))
```

# Three Variables

```{r}
seals$z <- with(seals, sqrt(delta_long^2 + delta_lat^2))
l <- ggplot(seals, aes(long, lat))
```

-   `l + geom_contour(aes(z = z))`: Draw 2D contour plot. `aes()` arguments: `x`, `y`, `z`, `alpha`, `color`, `group`, `linetype`, `linewidth`, `weight`.

-   `l + geom_contour_filled(aes(fill = z))`: Draw 2D contour plot with the space between lines filled. `aes()` arguments: `x`, `y`, `alpha`, `color`, `fill`, `group`, `linetype`, `linewidth`, `subgroup`.

-   `l + geom_raster(aes(fill = z), hjust = 0.5, vjust = 0.5, interpolate = FALSE)`: Draw a raster plot. `aes()` arguments: `x`, `y`, `alpha`, `fill`.

-   `l + geom_tile(aes(fill = z))`: Draw a tile plot. `aes()` arguments: `x`, `y`, `alpha`, `color`, `fill`, `linetype`, `linewidth`, `width`.

<!-- Page 2 -->

# Stats

An alternative way to build a layer.

A stat builds new variables to plot (e.g., count, prop).

Visualize a stat by changing the default stat of a geom function, `geom_bar(stat = "count")`, or by using a stat function, `stat_count(geom = "bar")`, which calls a default geom to make a layer (equivalent to a geom function). Use `after_stat(name)` syntax to map the stat variable `name` to an aesthetic.

```{r}
i + stat_density_2d(aes(fill = after_stat(level)), geom = "polygon")
```

In this example, `"polygon"` is the geom to use, `stat_density_2d()` is the stat function, `aes()` contains the geom mappings, and `level` is the variable created by stat.

-   `hwy stat_bin(binwidth = 1, boundary = 10)`: `x`, `y` \| `count`, `ncount`, `density`, `ndensity`

-   `hwy stat_count(width = 1)`: `x`, `y` \| `count`, `density`

-   `hwy stat_density(adjust = 1, kernel = "gaussian")`: `x`, `y` \| `count`, `density`, `scaled`

-   `e + stat_bin_2d(bins = 30, drop = T)`: `x`, `y`, `fill` \| `count`, `density`

-   `e + stat_bin_hex(bins =30)`: `x`, `y`, `fill` \| `count`, `density`

-   `e + stat_density_2d(contour = TRUE, n = 100)`: `x`, `y`, `color`, `linewidth` \| `level`

-   `e + stat_ellipse(level = 0.95, segments = 51, type = "t")`

-   `l + stat_contour(aes(z = z))`: `x`, `y`, `z`, `order` \| `level`

-   `l + stat_summary_hex(aes(z = z), bins = 30, fun = max)`: `x`, `y`, `z`, `fill` \| `value`

-   `l + stat_summary_2d(aes(z = z), bins = 30, fun = mean)`: `x`, `y`, `z`, `fill` \| `value`

-   `f + stat_boxplot(coef = 1.5)`: `x`, `y` \| `lower`, `middle`, `upper`, `width`, `ymin`, `ymax`

-   `f + stat_ydensity(kernel = "gaussian", scale = "area")`: `x`, `y` \| `density`, `scaled`, `count`, `n`, `violinwidth`, `width`

-   `e + stat_ecdf(n = 40)`: `x`, `y` \| `x`, `y`

-   `e + stat_quantile(quantiles = c(0.1, 0.9), formula = y ~ log(x), method = "rq")`: `x`, `y` \| `quantile`

-   `e + stat_smooth(method = "lm", formula = y ~ x, se = T, level = 0.95)`: `x`, `y` \| `se`, `x`, `y`, `ymin`, `ymax`

-   `ggplot() + xlim(-5, 5) + stat_function(fun = dnorm, n = 20, geom = "point")`: `x` \| `x`, `y`

-   `ggplot() + stat_qq(aes(sample = 1:100))`: `x`, `y`, `sample` \| `sample`, `theoretical`

-   `e + stat_sum()`: `x`, `y`, `size` \| `n`, `prop`

-   `e + stat_summary(fun.data = "mean_cl_boot")`

-   `h + stat_summary_bin(fun = "mean", geom = "bar")`

-   `e + stat_identity()`

-   `e + stat_unique()`

# Scales

Override defaults with **scales** package.

**Scales** map data values to the visual values of an aesthetic. To change a mapping, add a new scale.

```{r}
n <- d + geom_bar(aes(fill = fl))

n + scale_fill_manual(
  values = c("skyblue", "royalblue", "blue", "navy"),
  limits = c("d", "e", "p", "r"),
  breaks =c("d", "e", "p", "r"),
  name = "fuel", 
  labels = c("D", "E", "P", "R")
)
```

In this example, `scale_` specifies a scale function, `fill` is the aesthetic to adjust, and `manual` is the prepackaged scale to use.

`values` contains scale-specific arguments, `limits` specifies the range of values to include in mappings, `breaks` specifies the breaks to use in legend/axis, and `name` and `labels` specify the title and labels to use in the legend/axis.

### General Purpose Scales

Use with most aesthetics.

-   `scale_*_continuous()`: Map continuous values to visual ones.

-   `scale_*_discrete()`: Map discrete values to visual ones.

-   `scale_*_binned()`: Map continuous values to discrete bins.

-   `scale_*_identity()`: Use data values as visual ones.

-   `scale_*_manual(values = c())`: Map discrete values to manually chosen visual ones.

-   `scale_*_date(date_labels = "%m/%d", date_breaks = "2 weeks")`: Treat data values as dates.

-   `scale_*_datetime()`: Treat data values as date times. Same as `scale_*_date()`. See `?strptime` for label formats.

### X & Y Location Scales

Use with x or y aesthetics (x shown here).

-   `scale_x_log10()`: Plot `x` on log10 scale.

-   `scale_x_reverse()`: Reverse the direction of the x axis.

-   `scale_x_sqrt()`: Plot `x` on square root scale.

### Color and Fill Scales (Discrete)

-   `n + scale_fill_brewer(palette = "Blues")`: Use color scales from ColorBrewer. For palette choices `RColorBrewer::display.brewer.all()`.

-   `n + scale_fill_grey(start = 0.2, end = 0.8, na.value = "red")`: Use a grey gradient color scale.

### Color and Fill Scales (Continuous)

```{r}
o <- hwy geom_dotplot(aes(fill = ..x..))
```

-   `o + scale_fill_distiller(palette = "Blues")`: Interpolate a palette into a continuous scale.

-   `o + scale_fill_gradient(low = "red", high = "yellow")`: Create a two color gradient.

-   `o + scale_fill_gradient2(low = "red", high = "blue", mid = "white", midpoint = 25)`: Create a diverging color gradient.

-   `o + scale_fill_gradientn(colors = topo.colors(6))`: Create a n-color gradient. Also `rainbow()`, `heat.colors()`, `terrain.colors()`, `cm.colors()`, `RColorBrewer::brewer.pal()`.

### Shape and Size Scales

```{r}
p <- e + geom_point(aes(shape = fl, size = cyl))
```

-   `p + scale_shape() + scale_size()`: Map discrete values to shape and size aesthetics.

-   `p + scale_shape_manual(values = c(3:7))`: Map discrete values to specified shape values.

-   `p + scale_radius(range = c(1,6))`: Map values to a shape's radius.

-   `p + scale_size_area(max_size = 6)`: Like `scale_size()` but maps zero values to zero size.

Shapes used here are the same as the ones listed in the Aes section.

# Coordinate Systems

```{r}
u <- d + geom_bar()
```

-   `u + coord_cartesian(xlim = c(0, 5))`: `xlim`, `ylim`. The default Cartesian coordinate system.

-   `u + coord_fixed(ratio = 1/2)`: `ratio`, `xlim`, `ylim`. Cartesian coordinates with fixed aspect ration between x and y units.

-   `ggplot(mpg, aes(y = fl)) + geom_bar()`: Flip Cartesian coordinates by switching x and y aesthetic mappings.

-   `u + coord_polar(theta = "x", direction = 1)`: `theta`, `start`, `direction`. Polar coordinates.

-   `u + coord_trans(y = "sqrt")`: `x`, `y`, `xlim`, `ylim`. Transformed Cartesian coordinates. Set `xtrans` and `ytrans` to the name of a window function.

-   `π + coord_sf()`: `xlim`, `ylim`, `crs`. Ensures all layers use a common Coordinate Reference System.

# Position Adjustments

Position adjustments determine how to arrange geoms that would otherwise occupy the same space.

```{r}
s <- ggplot(mpg, aes(fl, fill = drv))
```

-   `s + geom_bar(position = "dodge")`: Arrange elements side by side.

-   `s + geom_bar(position = "fill")`: Stack elements on top of one another, normalize height.

-   `e + geom_point(position = "jitter")`: Add random noise to X and Y position of each element to avoid over plotting.

-   `e + geom_label(position = "nudge")`: Nudge labels away from points.

-   `s + geom_bar(position = "stack")`: Stack elements on top of one another.

Each position adjustment can be recast as a function with manual `width` and `height` arguments:

```{r}
s + geom_bar(position = position_dodge(width = 1))
```

# Themes

-   `u + theme_bw()`: White background with grid lines.

-   `u + theme_gray()`: Grey background with white grid lines (default theme).

-   `u + theme_dark()`: Dark grey background and grid lines for contrast.

-   `u + theme_classic()`: No grid lines.

-   `u + theme_light()`: Light grey axes and grid lines.

-   `u + theme_linedraw()`: Uses only black lines.

-   `u + theme_minimal()`: Minimal theme.

-   `u + theme_void()`: Empty theme.

-   `u + theme()`: Customize aspects of the theme such as axis, legend, panel, and facet properties.

```{r}
u + labs(title = "Title") + theme(plot.title.position = "plot")
        
u + theme(panel.background = element_rect(fill = "blue"))
```

# Faceting

Facets divide a plot into subplots based on the values of one or more discrete variables.

```{r}
t <- ggplot(mpg, aes(cty, hwy)) + geom_point()
```

-   `t + facet_grid(. ~ fl)`: Facet into a column based on fl.

-   `t + facet_grid(year ~ .)`: Facet into rows based on year.

-   `t + facet_grid(year ~ fl)`: Facet into both rows and columns.

-   `t + facet_wrap(~ fl)`: Wrap facets into a rectangular layout.

-   `t + facet_grid(drv ~ fl, scales = "free")`: Set **scales** to let axis limits vary across facets. Also `"free_x"` for x axis limits adjust to individual facets and `"free_y"` for y axis limits adjust to individual facets.

Set **labeller** to adjust facet label:

-   `t + facet_grid(. ~ fl, labeller = label_both)`: Labels each facet as "fl: c", "fl: d", etc.

-   `t + facet_grid(fl ~ ., labeller = label_bquote(alpha ^ .(fl)))`: Labels each facet as "𝛼^c^", "𝛼^d^", etc.

# Labels and Legends

Use `labs()` to label elements of your plot.

```         
t + labs(x = "New x axis label", 
  y = "New y axis label",
  title ="Add a title above the plot",
  subtitle = "Add a subtitle below title",
  caption = "Add a caption below plot",
  alt = "Add alt text to the plot",
  <Aes> = "New <Aes> legend title")
```

-   `t + annotate(geom = "text", x = 8, y = 9, label = "A")`: Places a geom with manually selected aesthetics.

-   `p + guides(x = guide_axis(n.dodge = 2))`: Avoid crowded or overlapping labels with `guide_axis(n.dodge or angle)`.

-   `n + guides(fill = "none")`: Set legend type for each aesthetic: `colorbar`, `legend`, or `none` (no legend).

-   `n + theme(legend.position = "bottom")`: Place legend at "bottom", "top", "left", or "right".

-   `n + scale_fill_discrete(name = "Title", labels = c("A", "B", "C", "D", "E"))`: Set legend title and labels with a scale function.

# Zooming

-   `t + coord_cartesian(xlim = c(0, 100), ylim = c(10,20))`: Zoom without clipping (preferred).

-   `t + xlim(0, 100) + ylim(10, 20)` or `t + scale_x_continuous(limits = c(0, 100)) + scale_y_continuous(limits = c(0, 100))`: Zoom with clipping (removes unseen data points).

------------------------------------------------------------------------

CC BY SA Posit Software, PBC • [info\@posit.co](mailto:info@posit.co) • [posit.co](https://posit.co)

Learn more at [ggplot2.tidyverse.org](https://ggplot2.tidyverse.org).

Updated: `r format(Sys.Date(), "%Y-%m")`.

```{r}
#| output: true

packageVersion("ggplot2")
```

------------------------------------------------------------------------
